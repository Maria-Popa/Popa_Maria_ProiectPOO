//Domeniul: COMPANIE

#include<iostream>

using namespace std;

class Angajat {
private:
	string nume;
	int* varsta;
	float salariu;
	string departament;
	static int nrTotalAngajati;
	const string companie = "Companie";

public:
	Angajat() {
		this->nume = "NoName";
		this->varsta = NULL;
		this->salariu = 0;
		this->departament = "FaraDepartament";
	}

	Angajat(string nume, string departament) {
		this->nume = nume;
		this->varsta = NULL;
		this->salariu = 0;
		this->departament = departament;
	}

	Angajat(const Angajat& a) : companie(a.companie) {
		this->nume = a.nume;
		this->salariu = a.salariu;
		this->departament = a.departament;
		this->nrTotalAngajati = a.nrTotalAngajati;
		if (this->varsta != NULL)
			delete[]this->varsta;
		this->varsta = new int[a.nrTotalAngajati];
		for (int i = 0; i < this->nrTotalAngajati; i++)
			this->varsta[i] = a.varsta[i];
	}

	const Angajat& operator= (const Angajat& a) {
		if (this != &a) {
			this->nume = a.nume;
			this->salariu = a.salariu;
			this->departament = a.departament;
			this->nrTotalAngajati = a.nrTotalAngajati;
			if (this->varsta != NULL)
				delete[]this->varsta;
			this->varsta = new int[nrTotalAngajati];
			for (int i = 0; i < this->nrTotalAngajati; i++)
				this->varsta[i] = a.varsta[i];
		}
	}

	Angajat operator+(const Angajat& a) {
		Angajat aux = *this;
		aux.salariu = this->salariu + a.salariu;
		aux.nrTotalAngajati = this->nrTotalAngajati + a.nrTotalAngajati;
		if (aux.varsta != NULL)
			delete[]aux.varsta;
		for (int i = 0; i < this->nrTotalAngajati; i++)
			aux.varsta[i] = this->varsta[i];
		for (int j = this->nrTotalAngajati; j < aux.nrTotalAngajati; j++)
			aux.varsta[j] = a.varsta[j - this->nrTotalAngajati];
		return aux;
	}

	int& operator[](int index) {
		return this->varsta[index];
	}
	const bool& operator==(const Angajat& a) {
		if (this->getNume() != a.getNume() || this->getSalariu() != a.getSalariu() || this->getNrTotalAngajati() != a.getNrTotalAngajati() ||
			this->getDepartament() != a.getDepartament() || this->companie != a.companie)
			return false;
		else
			for (int i = 0; i < this->nrTotalAngajati; i++) {
				if (this->varsta[i] != a.varsta[i])
					return false;
			}
		return true;
	}

	Angajat(string nume, int* varsta, float salariu, string departament, int nrTotalAngajati, string companie) : companie(companie) {
		this->nume = nume;
		this->varsta = new int[nrTotalAngajati];
		for (int i = 0; i < nrTotalAngajati; i++)
		{
			this->varsta[i] = varsta[i];
		}
		this->salariu = salariu;
		this->departament = departament;
	}
	~Angajat() {
		if (this->varsta != NULL)
			delete[]this->varsta;
	}

	float getSalariulMediu() {
		if (this->nrTotalAngajati == 0)
			return 0;
		return this->salariu / this->nrTotalAngajati;
	}

	void afisareAngajat() {
		cout << "Angajatul " << nume << " are varsta ";
		if (varsta != NULL) {
			cout << "Varsta: " << *varsta << endl;
		}
		else {
			cout << "Varsta: Informatie lipsa" << endl;
		}
		cout << "si salariul " << salariu << ". Face parte din departamentul " << departament << endl;
	}
	static void setNrTotalAngajati() {
		Angajat::nrTotalAngajati = nrTotalAngajati;
	}
	void setNume(string nume) {
		this->nume = nume;
	}
	string getNume() const {
		return nume;
	}

	void setVarsta(int* varsta) {
		this->varsta = varsta;
	}

	int* getVarsta() const {
		return varsta;
	}

	void setSalariu(float salariu) {
		this->salariu = salariu;
	}

	float getSalariu() const {
		return salariu;
	}

	void setDepartament(string departament) {
		this->departament = departament;
	}

	string getDepartament() const {
		return departament;
	}

	static void setNrTotalAngajati(int nr) {
		nrTotalAngajati = nr;
	}

	static int getNrTotalAngajati() {
		return nrTotalAngajati;
	}

	string getCompanie() {
		return this->companie;
	}

	friend int getSalariuPeZi(Angajat& a) {
		return a.salariu / 30;
	}
	friend istream& operator>>(istream& in, Angajat& a) {
		cout << "Introduceti numele angajatului: ";
		in >> a.nume;
		cout << "Introduceti numele departamentului: ";
		in >> a.departament;
		cout << "Introduceti salariul angajatului: ";
		in >> a.salariu;
		cout << "Introduceti numarul angajatilor: ";
		int nrAng;
		in >> nrAng;
		a.setNrTotalAngajati(nrAng);
		delete[]a.varsta;
		a.varsta = new int[nrAng];
		for (int i = 0; i < nrAng; i++) {
			cout << "Introduceti varsta angajatului " << i + 1 << ": ";
			in >> a.varsta[i];
		}
		return in;
	}
	friend ostream& operator<<(ostream& out, Angajat& a) {
		out << endl;
		out << "Angajatul " << a.getNume() << " lucreaza in compania " << a.getCompanie() << ", in departamentul " << a.getDepartament() << ", are un salariu de " << a.getSalariu()
			<< "de lei";
		out << endl << "Acesta are " << a.getNrTotalAngajati() << " de colegi in acest departament, cu varstele :";
		for (int i = 0; i < a.getNrTotalAngajati(); i++)
			out << endl << a.varsta[i];
		out << endl;
		return out;

	}

};
int Angajat::nrTotalAngajati = 230;



class Departament {
private:
	string nume;
	int nrAngajati;
	int* varsteAngajati;
	const string sediuCentral;
	static string manager;

public:
	Departament() :sediuCentral("Nu exista") {
		this->nume = "NoName";
		this->nrAngajati = 0;
	}
	Departament(string nume) : sediuCentral("Nu exista") {
		this->nume = nume;
		this->nrAngajati = 0;
	}
	Departament(string nume, int nrAngajati, int* varsteAngajati, string sediuCentral) : sediuCentral(sediuCentral) {
		this->nume = nume;
		this->nrAngajati = nrAngajati;
		this->varsteAngajati = new int[nrAngajati];
		for (int i = 0; i < this->nrAngajati; i++)
			this->varsteAngajati[i] = varsteAngajati[i];
	}

	Departament(const Departament& d) :sediuCentral(d.sediuCentral) {
		this->nume = d.nume;
		this->nrAngajati = d.nrAngajati;
		this->varsteAngajati = d.varsteAngajati;
		if (this->varsteAngajati != NULL)
			delete[]this->varsteAngajati;
		this->varsteAngajati = new int[nrAngajati];
		for (int i = 0; i < this->nrAngajati; i++)
			this->varsteAngajati[i] = d.varsteAngajati[i];
	}

	const Departament& operator=(const Departament& d) {
		if (this != &d) {
			this->nume = d.nume;
			this->nrAngajati = d.nrAngajati;
			this->varsteAngajati = d.varsteAngajati;
			if (this->varsteAngajati != NULL)
				delete[]this->varsteAngajati;
			this->varsteAngajati = new int[nrAngajati];
			for (int i = 0; i < this->nrAngajati; i++)
				this->varsteAngajati[i] = d.varsteAngajati[i];
		}
	}

	const bool& operator!=(const Departament& d) {
		if (this->nume != d.nume || this->nrAngajati != d.nrAngajati || this->sediuCentral != d.sediuCentral)
			return true;
		else {
			for (int i = 0; i < this->nrAngajati; i++)
				if (this->varsteAngajati[i] != d.varsteAngajati[i])
					return true;
		}
		return false;
	}

	int& operator[](int index) {
		return this->varsteAngajati[index];
	}

	int operator()(int n) {
		int suma = 0;
		if (n > 0 && n < this->nrAngajati)
			for (int i = 0; i < n; i++)
				suma += this->varsteAngajati[i];
		return suma;
	}

	~Departament() {
		if (this->varsteAngajati != NULL)
			delete[]this->varsteAngajati;
	}

	// Funcție pentru a calcula salariul mediu al angajaților
	static float calculeazaSalariulMediu(float* salarii, int nrDeAngajati) {
		float sumaSalarii = 0;
		for (int i = 0; i < nrDeAngajati; i++) {
			sumaSalarii += salarii[i];
		}
		return sumaSalarii / nrDeAngajati;
	}

	void afisareDepartament() {
		cout << "Departamentul " << nume << " are " << nrAngajati << " angajati, cu varste: ";
		if (nrAngajati == 0)
			cout << "-";
		else
			for (int i = 0; i < nrAngajati; i++)
				cout << varsteAngajati[i] << " ";
		cout << ". Are sediul central  " << sediuCentral << " si managerul " << manager << endl;
	}

	void setNume(string nume) {
		this->nume = nume;
	}

	string getNume() const {
		return nume;
	}

	string getSediuCentral() const {
		return this->sediuCentral;
	}

	void setNrAngajati(int nr) {
		nrAngajati = nr;
	}

	int getNrAngajati() const {
		return nrAngajati;
	}

	void setVarsteAngajati(int* varste, int nrAngajati) {
		varsteAngajati = new int[nrAngajati];
		for (int i = 0; i < nrAngajati; i++) {
			varsteAngajati[i] = varste[i];
		}
	}

	int* getVarsteAngajati() const {
		return varsteAngajati;
	}

	static void setManager(string manager) {
		Departament::manager = manager;
	}

	static string getManager() {
		return manager;
	}
	friend istream& operator>>(istream& in, Departament& d) {
		cout << "Introduceti numele departamentului: ";
		in >> d.nume;
		cout << "Introduceti numarul de angajati: ";
		in >> d.nrAngajati;
		cout << "Introduceti numele managerului: ";
		string manager;
		in >> manager;
		d.setManager(manager);
		d.varsteAngajati = new int[d.getNrAngajati()];
		for (int i = 0; i < d.getNrAngajati(); i++) {
			cout << endl << "Introduceti varsta angajatului " << i + 1 << ": ";
			in >> d.varsteAngajati[i];
		}
		return in;
	}
	friend ostream& operator<<(ostream& out, Departament& d) {
		out << endl;
		out << "Departamentul " << d.getNume() << " are sediul central in " << d.getSediuCentral() << ", are un numar de " << d.getNrAngajati() << " de angajati, cu varstele: " << endl;
		for (int i = 0; i < d.getNrAngajati(); i++) {
			out << d.varsteAngajati[i] << endl;
		}
		out << endl;
		return out;

	}
};

string Departament::manager = "Manager";


class Produs {
private:
	string nume;
	float pret;
	int stocDisponibil;
	static int nrTotalProduse;
	const float taxaTVA = 0.19;
	int nrMarciIstoric;
	int* istoricMarci;

public:
	Produs() : taxaTVA(0.19) {
		this->nume = "NoName";
		this->pret = 0;
		this->stocDisponibil = 0;
		this->istoricMarci = NULL;
		this->nrMarciIstoric = 0;
	}

	Produs(string nume, int stocDisponibil) : taxaTVA(0.19) {
		this->nume = nume;
		this->pret = 0;
		this->stocDisponibil = stocDisponibil;
		this->istoricMarci = NULL;
		this->nrMarciIstoric = 0;
	}

	Produs(string nume, float pret, int stocDisponibil, float taxaTVA, int nrMarciDinIstoric, int* istoricMarci) : taxaTVA(taxaTVA) {
		this->nume = nume;
		this->pret = pret;
		this->stocDisponibil = stocDisponibil;
		this->nrMarciIstoric = nrMarciDinIstoric;
		this->istoricMarci = new int[nrMarciDinIstoric];
		for (int i = 0; i < nrMarciDinIstoric; i++) {
			this->istoricMarci[i] = istoricMarci[i];
		}
	}

	Produs(Produs& p) : taxaTVA(p.taxaTVA) {
		this->nume = p.nume;
		this->pret = p.pret;
		this->stocDisponibil = p.stocDisponibil;
		this->nrMarciIstoric = p.nrMarciIstoric;
		this->istoricMarci = new int[nrMarciIstoric];
		for (int i = 0; i < this->nrMarciIstoric; i++)
			this->istoricMarci[i] = p.istoricMarci[i];
	}

	const Produs& operator=(const Produs& p) {
		if (this != &p) {
			this->nume = p.nume;
			this->pret = p.pret;
			this->stocDisponibil = p.stocDisponibil;
			this->nrMarciIstoric = p.nrMarciIstoric;
			this->istoricMarci = new int[nrMarciIstoric];
			for (int i = 0; i < this->nrMarciIstoric; i++)
				this->istoricMarci[i] = p.istoricMarci[i];
		}
	}

	const bool& operator<(const Produs& p) {
		if (this->pret < p.pret && this->stocDisponibil < p.stocDisponibil)
			return true;
		return false;
	}

	const bool& operator>(const Produs& p) {
		if (this->pret > p.pret && this->stocDisponibil > p.stocDisponibil)
			return true;
		return false;
	}

	int& operator[](int index) {
		return this->istoricMarci[index];
	}

	~Produs() {
		if (this->istoricMarci != NULL)
			delete[]this->istoricMarci;
	}

	void afisareProdus() {
		cout << "Produsul cu numele " << nume << " si pretul " << pret
			<< ", este disponibil de " << stocDisponibil << " ori. Numarul total de produse este de "
			<< nrTotalProduse << " iar taxa TVA este de " << taxaTVA;
		if (istoricMarci != NULL) {
			for (int i = 0; i < this->nrMarciIstoric; i++)
				cout << this->istoricMarci[i];
		}
		else {
			cout << "Nu exista un istoric al marcilor pentru produsul " << this->nume << endl;
		}
		cout << endl;

	}


	static void setNrTotalProduse(int nrTotalProduse) {
		Produs::nrTotalProduse = nrTotalProduse;
	}

	void setNume(string nume) {
		this->nume = nume;
	}

	string getNume() const {
		return nume;
	}

	void setPret(float pret) {
		this->pret = pret;
	}

	float getPret() const {
		return pret;
	}

	void setStocDisponibil(int stoc) {
		stocDisponibil = stoc;
	}

	int getStocDisponibil() const {
		return stocDisponibil;
	}

	int getNrTotalProduse() const {
		return nrTotalProduse;
	}

	void setNrMarciIstoric(int nrMarci) {
		nrMarciIstoric = nrMarci;
	}

	int getNrMarciIstoric() const {
		return nrMarciIstoric;
	}

	float getTaxaTVA() const {
		return this->taxaTVA;
	}

	void setIstoricMarci(int* istoric, int nrMarci) {
		istoricMarci = new int[nrMarci];
		for (int i = 0; i < nrMarci; i++) {
			istoricMarci[i] = istoric[i];
		}
	}

	int* getIstoricMarci() const {
		return istoricMarci;
	}

	friend float calculeazaValoareStoc(Produs& p) {
		int x = p.pret * p.stocDisponibil;
		return x;
	}
	friend istream& operator>>(istream& in, Produs& p) {
		cout << "Introduceti numele produsului: ";
		in >> p.nume;
		cout << "Introduceti pretul produsului: ";
		in >> p.pret;
		cout << "Introduceti stocul disponibil al produsului curent: ";
		in >> p.stocDisponibil;
		cout << "Cate marci din istoricul produsului se cunosc? " << endl;
		in >> p.nrMarciIstoric;
		delete[]p.istoricMarci;
		p.istoricMarci = new int[p.getNrMarciIstoric()];
		for (int i = 0; i < p.getNrMarciIstoric(); i++) {
			cout << endl << i + 1 << ": ";
			in >> p.istoricMarci[i];
		}
		return in;
	}
	friend ostream& operator<<(ostream& out, Produs& p) {
		out << endl;
		out << "Produsul " << p.getNume() << " se afla in baza de date alaturi de " << p.getNrTotalProduse() << " produse, in stoc se afla in numar de " << p.getStocDisponibil();
		out << endl << "Pretul curent al acestui produs este " << p.getPret() << ", la care se aplica un tva de " << p.getTaxaTVA();
		out << endl << "Din trecutul produsului se cunosc " << p.getNrMarciIstoric() << " de marci, acestea fiind: ";
		for (int i = 0; i < p.getNrMarciIstoric(); i++)
			out << endl << i + 1 << ": " << p.getIstoricMarci()[i];
		out << endl;
		return out;

	}
};

int Produs::nrTotalProduse = 2000;



void main() {

	Angajat angajat;
	angajat.afisareAngajat();

	int varste[] = { 30, 35, 40 };
	Angajat angajat1("Ion", varste, 5000.0, "IT", 200, "Companie");
	angajat1.afisareAngajat();
	Angajat angajat2 = angajat1;
	Angajat angajat3(angajat1);
	cout << getSalariuPeZi(angajat1) << endl;
	if (angajat2 == angajat1)
		cout << endl << "Au fost introdusi doi agenti identici." << endl;
	Angajat a1;
	cin >> a1;
	Angajat a2 = a1 + angajat1;
	cout << "A avut loc o modificare cu angajatul " << a2.getNume() << endl;
	cout << a2;
	cout << endl << "Dintre angajati, s-a observat ca un tanar talent depaseste asteptarile tuturor, acesta are varsta de " << a2[1] << "de ani." << endl;

	Departament departament1("HR", 3, varste, "Centrala");
	departament1.afisareDepartament();
	Departament d1;
	cout << "Va rugam sa introduceti un departament nou!" << endl;
	cin >> d1;
	if (d1 != departament1)
		cout << endl << "Va multumim.";
	else
		cout << endl << "Si v-am rugat ceva...";
	cout << "Din departamentul " << d1.getNume() << " se remarca unul dintre angajati, acesta are varsta de " << d1[2] << " de ani, in timp ce media departamentului este de "
		<< (d1(d1.getNrAngajati() - 1) / d1.getNrAngajati()) << " de ani";


	int istoricMarci[] = { 1111, 1112, 1115 };
	Produs produs1("Laptop", 1500.0, 10, 0.19, 3, istoricMarci);
	produs1.afisareProdus();
	cout << calculeazaValoareStoc(produs1) << endl;
	Produs p1;
	cin >> p1;
	Produs p2 = p1;
	if (produs1 > p1)
		cout << endl << "Trebuie sa introducem si produse cu cantitati si preturi mai mari decat cele deja existente.";
	if (produs1 < p1)
		cout << endl << "Trebuie sa introducem si produse cu cantitati si preturi mai mici decat cele deja existente.";
	cout << endl << "Dintre toate aceste preturi, cele mai mari vanzari au fost inregistrate cand costul a fost " << p1[0];

	Angajat angajat12;
	cin >> angajat12;
	cout << angajat12;
	cout << endl;

	Departament departament12;
	cin >> departament12;
	cout << departament12;
	cout << endl;

	Produs produs12;
	cin >> produs12;
	cout << produs12;
	cout << endl;

	int nrAngajati = 0;
	cout << "Numarul de angajati este :";
	cin >> nrAngajati;
	Angajat* vangajat = new Angajat[nrAngajati];
	for (int i = 0; i < nrAngajati; i++) {
		cout << "Angajatul cu numarul: " << i + 1 << " : ";
		cin >> vangajat[i];
	}
	for (int i = 0; i < nrAngajati; i++) {
		cout << "Angajatul cu numarul: " << i + 1 << " : ";
		cout << vangajat[i];
		cout << endl;
	}
	cout << endl;


	int nrDepartamente = 0;
	cout << "Numarul departamentelor este :\n";
	cin >> nrDepartamente;
	Departament* vdepartament = new Departament[nrDepartamente];
	for (int i = 0; i < nrDepartamente; i++) {
		cout << "Departamentul cu numarul " << i + 1 << " : ";
		cin >> vdepartament[i];
	}
	for (int i = 0; i < nrDepartamente; i++) {
		cout << "Departamentul cu numarul " << i + 1 << " : ";
		cout << vdepartament[i];
		cout << endl;
	}
	cout << endl;

	int nrProduse = 0;
	cout << "Numarul de produse este :";
	cin >> nrProduse;
	Produs* vprodus = new Produs[nrProduse];
	for (int i = 0; i < nrProduse; i++) {
		cout << "Produsul cu numarul: " << i + 1 << " : ";
		cin >> vprodus[i];
	}
	for (int i = 0; i < nrProduse; i++) {
		cout << "Produsul cu numarul: " << i + 1 << " : ";
		cout << vprodus[i];
		cout << endl;
	}
	cout << endl;

	int nrLinii = 0;
	int nrColoane = 0;
	cout << "Numarul de linii din matrice: ";
	cin >> nrLinii;
	cout << "Numarul de coloane din matrice: ";
	cin >> nrColoane;
	Produs** matriceProdus = new Produs * [nrLinii];
	for (int i = 0; i < nrLinii; i++) {
		matriceProdus[i] = new Produs[nrColoane];

	}
	cout << "Matrice:" << endl;
	for (int i = 0; i < nrLinii; i++) {
		for (int j = 0; j < nrColoane; j++) {
			cout << "Linia: " << (i + 1) << " si coloana:" << (j + 1) << endl;
			cin >> matriceProdus[i][j];
		}
	}
	cout << "Afisare matrice: " << endl;
	for (int i = 0; i < nrLinii; i++) {
		for (int j = 0; j < nrColoane; j++) {
			cout << "Linia: " << (i + 1) << " si coloana: " << (j + 1) << endl;
			cout << matriceProdus[i][j];
		}
	}
	cout << endl;

};
